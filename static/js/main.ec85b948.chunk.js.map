{"version":3,"sources":["components/SchedItem.js","components/Schedule.js","components/Logo.js","components/TeamViewer.js","components/SchedHead.js","components/IdLogo.js","components/Playerstats.js","components/Populate.js","App.js","reportWebVitals.js","index.js"],"names":["SchedItem","props","homeTeam","game","teams","home","awayTeam","away","useState","homeLogo","find","id","team","awayLogo","today","Date","gameDate","gameTime","toLocaleTimeString","hour","minute","toLocaleDateString","Container","Card","withBorder","Text","color","size","align","Group","direction","position","Image","src","logo","height","width","fit","spacing","score","status","detailedState","TeamViewer","schedData","isReady","setIsReady","schedule","setSchedule","endDate","startDate","getFullYear","getMonth","getDate","useEffect","a","axios","get","then","res","data","dates","getData","className","map","item","games","item2","Center","Loader","Logo","curTeam","style","background","colors","onClick","changeId","Paper","alt","name","teamData","loadingData","setLoadingData","setData","roster","Table","striped","horizontalSpacing","verticalSpacing","key","jerseyNumber","Anchor","changePlayer","person","fullName","SchedHead","todaySchedule","setTodaySchedule","AccordionLabel","tString","Divider","my","label","labelPosition","fluid","shadow","p","Accordion","Item","Grid","span","IdLogo","logoTeam","Playerstats","playerImage","setPlayerImage","player","setPlayer","urlInput","playerId","config","url","stats","splits","Kbd","weight","underline","league","season","stat","wins","Math","round","goalAgainstAverage","savePercentage","shutouts","goals","assists","points","shotPct","Populate","setId","setPlayerId","logoTeamName","pid","toLowerCase","arr","split","i","length","charAt","toUpperCase","slice","join","swipeable","draggable","showDots","responsive","desktop","breakpoint","max","min","items","tablet","slidesToSlide","mobile","ssr","infinite","keyBoardControl","transitionDuration","containerClass","removeArrowOnDeviceType","dotListClass","itemClass","isActive","Space","h","Box","Title","columns","gutter","Col","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec85b948.chunk.js","sourcesContent":["import {useState} from 'react'\nimport { Popover, Image, Card, Group, Container, Text} from '@mantine/core'\nimport teams from '@nhl-api/teams'\nimport './styles.css'\n\nexport default function SchedItem(props){//this prop should be an object, for simplicity.\n    let homeTeam = props.game.teams.home\n    let awayTeam = props.game.teams.away\n    const [opened, setOpened] = useState(false);\n\n    //console.log(props.game)\n    let homeLogo = teams.find((id) => {\n        if(id.id === homeTeam.team.id){\n            return true;\n        }\n    });\n    let awayLogo = teams.find((id) => {\n        if(id.id === awayTeam.team.id){\n            return true;\n        }\n    })\n    let today = new Date()\n    let gameDate = new Date(props.game.gameDate)\n    let gameTime = gameDate.toLocaleTimeString([], {hour : '2-digit', minute: \"2-digit\"})\n    gameDate = gameDate.toLocaleDateString(\"en-US\")\n\n    return (\n            \n            <Container>\n                    <Card withBorder>\n                        <Text color='dimmed' size='xs' align='center'>Score</Text>\n                        <Group direction='row' position='apart'>\n                            <Image src={homeLogo.logo} height={60} width={100} fit='contain'/>\n                            <Group direction='column' position='center' spacing='xs'>\n                                <Text size='xl'>{homeTeam.score} - {awayTeam.score}</Text>\n                                {props.game.status.detailedState === \"Scheduled\" ? <Text size='xs'>{gameTime}</Text> : <Text size='xs'>{props.game.status.detailedState}</Text>}\n                                {gameDate === today.toLocaleDateString(\"en-US\") ? null : <Text size='xs'>{gameDate}</Text>}\n                            </Group>\n                            <Image src={awayLogo.logo} height={60} width={100} fit='contain'/>\n                        </Group>\n                        <Group position='apart'>\n                            <Text color='dimmed' size='xs' align='left'>Home</Text>\n                            <Text color='dimmed' size='xs' align='right'>Away</Text>\n                        </Group>\n                    </Card>\n            </Container>\n    )\n}","import {react, useEffect, useState} from 'react'\nimport axios from 'axios'\nimport './styles.css'\nimport {Center, Loader} from '@mantine/core'\nimport teams from \"@nhl-api/teams\"\nimport SchedItem from './SchedItem'\n\n\nexport default function TeamViewer(props){\n    const [isReady, setIsReady] = useState(false)\n    const [schedule, setSchedule] = useState()\n    //https://statsapi.web.nhl.com/api/v1/game/2020020411/feed/live?teamId=teamid\n    //Link to live game stats! might be slow because the endpoint is huuuuge. \n\n    var endDate = new Date();\n    var startDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate()-7).toLocaleDateString(\"sv-SE\")\n    endDate = endDate.toLocaleDateString(\"sv-SE\")\n    let schedData;\n\n    useEffect(() => {\n        setIsReady(false)\n        async function getData(){\n            axios.get(`https://statsapi.web.nhl.com/api/v1/schedule?startDate=${startDate}&endDate=${endDate}&teamId=${props.id}`).then((res) => {\n                schedData = res.data.dates\n                //console.log(schedData);\n                setSchedule(schedData);\n                setIsReady(true);\n            })\n        }\n        getData();\n    }, [props.id])\n\n    return(\n        <div className=\"schedule-container\">\n        {isReady ? (\n            schedule.map((item) => {\n                return(\n                    item.games.map((item2) => {\n                        return(\n                            <SchedItem game={item2}/>\n                        )\n                    })\n                )\n            })\n        ) : (\n            <Center><Loader /></Center>\n        )}\n        </div>\n    )\n    \n    \n}","import { Paper, Image} from '@mantine/core'\nimport './styles.css'\n\nexport default function Logo(props){//team should be an object from teams\n    //THIS LOGO COMPONENT IS STRICTLY USED FOR THE CAROUSEL.\n    var curTeam = props.team\n    var style = {}\n    if(curTeam.id === 14){\n        style = {\n            background: \"rgb(0, 70, 184)\",//for tampa bay looking weird with first color\n        }\n    }else{\n        style = {\n            background: curTeam.colors[0],\n        }\n    }\n    return (//highlight when teams information is being displayed? maybe a parent->child state transfer\n        <div className=\"logo\" style={style} onClick={() => props.changeId(curTeam.id)}>\n                <Paper style={style}>\n                        <Image height={30} fit=\"contain\" src={curTeam.logo} alt={curTeam.name}></Image>\n                </Paper>\n        </div>\n    )\n}","import {react, useEffect, useState} from 'react'\nimport { Table, Anchor, Center, Loader } from '@mantine/core'\nimport axios from 'axios'\nimport './styles.css'\nimport teams from \"@nhl-api/teams\"\n\n\nexport default function TeamViewer(props){\n    const [loadingData, setLoadingData] = useState(false);//think of this more as isReady! haven't changed yet\n    const [data, setData] = useState()\n    let teamData;\n    \n    useEffect(() => {\n        setLoadingData(false)\n        async function getData(){\n            axios.get(`https://statsapi.web.nhl.com/api/v1/teams/${props.id}?expand=team.roster`).then((res) => {\n                teamData = res.data.teams[0].roster.roster\n                //console.log(teamData);\n                setData(teamData);\n                setLoadingData(true);\n            })\n        }\n        getData();\n    }, [props.id])\n\n    return(\n        <div className=\"table-container\">\n                <Table striped horizontalSpacing={-1} verticalSpacing='xs'>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Name</th>\n                            <th>Position</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {loadingData ? (\n                            data.map((item, key) => {\n                                return(\n                                    <tr key={key}>\n                                        <td>{item.jerseyNumber}</td>\n                                        <td><Anchor onClick={() => props.changePlayer([item.person.id, item.person.fullName, item.position.name])}>{item.person.fullName}</Anchor></td>\n                                        <td>{item.position.name}</td>\n                                    </tr>\n                                )\n                            })\n                        ) : (\n                            <tr><td><Center><Loader /></Center></td></tr>\n                        )}\n                    </tbody>\n                </Table>\n        </div>\n    )\n    \n    \n}","import {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport { Container, Paper, Grid, Divider, Accordion, Center, Loader } from '@mantine/core'\nimport teams from '@nhl-api/teams'\nimport SchedItem from './SchedItem'\nimport './styles.css'\n\nexport default function SchedHead(){\n    const [isReady, setIsReady] = useState(false)\n    const [todaySchedule, setTodaySchedule] = useState()\n    //https://statsapi.web.nhl.com/api/v1/game/2020020411/feed/live?teamId=teamid\n    //Link to live game stats! might be slow because the endpoint is huuuuge. \n\n    var endDate = new Date();\n    var startDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate()-7).toLocaleDateString(\"sv-SE\")\n    endDate = endDate.toLocaleDateString(\"sv-SE\")\n    var today = new Date();\n    let schedData;\n\n    //console.log(teams)\n\n    useEffect(() => {\n        setIsReady(false)\n        async function getData(){\n            axios.get(`https://statsapi.web.nhl.com/api/v1/schedule`).then((res) => {//gets todays schedule\n                schedData = res.data.dates\n                //console.log(schedData);\n                setTodaySchedule(schedData);\n                setIsReady(true);\n            })\n        }\n        getData();\n    }, [])\n\n    function AccordionLabel(){\n        let tString = `Todays schedule, ${today.toLocaleDateString(\"en-us\")}`\n        return(\n            <Divider my='md' label={tString} labelPosition=\"left\" />\n        )\n    }\n\n    return(\n        <Container fluid>\n            <Paper shadow='md' p='xl'>\n                <h1 >\n                    NHL Team Viewer\n                </h1>\n                <Accordion>\n                    <Accordion.Item label={<AccordionLabel/>}>\n                        <Grid>\n                            {isReady ? (\n                                todaySchedule[0].games.map((item, key) => {\n                                    return(\n                                        <SchedItem key={key} span={1} game={item}/>\n                                    )\n                                })\n                            ) : (\n                                <Center><Loader /></Center>\n                            )}\n                        </Grid>\n                    </Accordion.Item>\n                </Accordion>\n            </Paper>\n        </Container>\n    )\n}","import teams from '@nhl-api/teams'\nimport { Image } from '@mantine/core'\n\n\n//this component is designed to return a logo given a team id. \nexport default function IdLogo(props){\n    const logoTeam = teams.find((id) => {//object of team from teams array.\n        if(id.id === props.id){\n            return true;\n        }\n    });\n\n    return (\n        <Image src={logoTeam.logo} width={props.width} height={props.height} fit={props.fit}/>\n    )\n}","import {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport {Table, Paper, Group, Container, Kbd, Loader, Center, Image, Text} from '@mantine/core'\nimport IdLogo from './IdLogo'\n\nexport default function Playerstats(props){\n    const [playerImage, setPlayerImage] = useState(0)\n    const [player, setPlayer] = useState()\n    const [isReady, setIsReady] = useState(false)\n\n    let urlInput = props.playerId[0]//needed because i was having trouble accessing array indicies in the string modifier things -- template literals.\n\n    useEffect(() => {\n        async function getData(){\n            setIsReady(false)\n            await axios.get(`https://nhl.bamcontent.com/images/headshots/current/168x168/${urlInput}.jpg`).then((res) => {//gets player headshot\n                //console.log(res);\n                setPlayerImage(res.config.url)\n            })\n\n            await axios.get(`https://statsapi.web.nhl.com/api/v1/people/${urlInput}/stats?stats=yearByYear`).then((res) => {//gets player stats\n                //console.log(res)\n                setPlayer(res.data.stats[0].splits)\n                setIsReady(true);\n            })\n        }\n        if(props.playerId[0]){\n            getData();\n        }\n    },[props.playerId])\n    \n    \n    return(\n        \n        <Container fluid>\n            <Paper shadow='md' p='sm'>\n            {playerImage === 0 ? (<Kbd>←Select a player over there</Kbd>) : //if state has not been initialized\n                (isReady && player ? (\n                    <div>\n                        <Text size='lg' weight={500} underline>{props.playerId[1]}</Text>\n                        <Image src={playerImage} width={120} height={150}/>\n                        <Table striped horizontalSpacing={-1}/* <- weird mantine trick? */ verticalSpacing='xs'>\n                            <thead>\n                                {props.playerId[2] === 'Goalie' ? (\n                                    <tr>\n                                        <th>Year</th>\n                                        <th>Team</th>\n                                        <th>Games</th>\n                                        <th>Wins</th>\n                                        <th>GAA</th>\n                                        <th>Sv%</th>\n                                        <th>Shutouts</th>\n                                    </tr>\n                                ) : (\n                                    <tr>\n                                        <th>Year</th>\n                                        <th>Team</th>\n                                        <th>Games</th>\n                                        <th>Goals</th>\n                                        <th>Assists</th>\n                                        <th>Points</th>\n                                        <th>S Pct</th>\n                                    </tr>\n                                )}\n                            </thead>\n                            <tbody>\n                                {props.playerId[2] === 'Goalie' ? (\n                                    player.map((item, key) => {\n                                        if(item.league.id === 133){\n                                            return(\n                                                <tr key={key}>\n                                                    <td>{item.season}</td>\n                                                    <td><IdLogo id={item.team.id} height={20} width={20} fit='contain'/></td>\n                                                    <td>{item.stat.games}</td>\n                                                    <td>{item.stat.wins}</td>\n                                                    <td>{Math.round(item.stat.goalAgainstAverage * 100) / 100}</td>\n                                                    <td>{Math.round(item.stat.savePercentage * 1000) / 1000}</td>\n                                                    <td>{item.stat.shutouts}</td>\n                                                </tr>\n                                            )\n                                        }\n                                    })\n                                ) : (\n                                    player.map((item, key) => {\n                                        if(item.league.id === 133){\n                                            return(\n                                                <tr key={key}>\n                                                    <td>{item.season}</td>\n                                                    <td><IdLogo id={item.team.id} height={20} width={20} fit='contain'/></td>\n                                                    <td>{item.stat.games}</td>\n                                                    <td>{item.stat.goals}</td>\n                                                    <td>{item.stat.assists}</td>\n                                                    <td>{item.stat.points}</td>\n                                                    <td>{item.stat.shotPct}</td>\n                                                </tr>\n                                            )\n                                        }\n                                    })\n                                )}\n                            </tbody>\n                        </Table>\n                    </div>\n                ) : (<Center><Loader /></Center>))}\n            </Paper>\n        </Container>\n    )\n}","import { useState} from 'react'\nimport teams from \"@nhl-api/teams\"\nimport Schedule from './Schedule'\nimport Logo from './Logo'\nimport \"react-multi-carousel/lib/styles.css\";\nimport Carousel from 'react-multi-carousel';\nimport { Grid, Space, Group, Divider, Title, Box } from '@mantine/core'\nimport TeamViewer from './TeamViewer'\nimport SchedHead from './SchedHead'\nimport Playerstats from './Playerstats'\nimport IdLogo from './IdLogo'\n\nexport default function Populate() {\n    const [id, setId] = useState(21)\n    const [playerId, setPlayerId] = useState([])\n\n    let selectteam = teams.find((pid) => {\n        if(pid.id === id){\n            return true;\n        }\n    });\n    let logoTeamName = selectteam.name.toLowerCase()\n    const arr = logoTeamName.split(\" \");\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\n\n    }\n    logoTeamName = arr.join(\" \");\n    //^ this code is to literally format the team name, thats it.\n\n    const responsive = {\n        desktop: {\n          breakpoint: { max: 6000, min: 1024 },\n          items:20, // optional, default to 1.\n        },\n        tablet: {\n          breakpoint: { max: 1024, min: 464 },\n          items: 10,\n          slidesToSlide: 2 // optional, default to 1.\n        },\n        mobile: {\n          breakpoint: { max: 464, min: 0 },\n          items: 20,\n          slidesToSlide: 1 // optional, default to 1.\n        }\n      };\n    \n    return (//custom arrows? only show when hovering\n        <div>\n            <Carousel swipeable={false}\n                    draggable={true}\n                    showDots={false}\n                    responsive={responsive}\n                    ssr={true} // means to render carousel on server-side.\n                    infinite={true}\n                    keyBoardControl={true}\n                    transitionDuration={1}\n                    containerClass=\"carousel-container\"\n                    removeArrowOnDeviceType={[\"tablet\", \"mobile\"]}\n                    dotListClass=\"custom-dot-list-style\"\n                    itemClass=\"carousel-item-padding-40-px\">\n                {teams.map( (team,i) => {\n                    if(team.isActive){\n                        return(\n                            <div key='{team.id}'>  \n                                <Logo team={team} id={team.id} changeId={(id) => setId(id)}/>\n                            </div> \n                        )\n                    }\n                })}\n                \n            </Carousel>\n            <SchedHead />\n            <Space h='md'/>\n            <Box>\n                <Group direction='row'>\n                    <IdLogo id={id} width={200} height={200} fit='contain'/>\n                    <Title>{logoTeamName}</Title>\n                </Group>\n            </Box>\n            <Space h='md'/>\n            <Grid columns={3} align='space-evenly' gutter={-1}>\n                <Grid.Col span={1}><TeamViewer id={id} changePlayer={(playerId) => setPlayerId(playerId)}/></Grid.Col>\n                <Grid.Col span={1}><Schedule id={id}/></Grid.Col>\n                <Grid.Col span={1}><Playerstats playerId={playerId}/></Grid.Col>\n            </Grid>\n        </div>\n    )\n}","import './App.css';\nimport Populate from './components/Populate'\n\nexport const App = () => {\n  return(//Implement who scored, and stuff.\n        //Error on pages with no data, if a team isnt playing any games it breaks. make sure data is not null in scheditem\n        //Dropdown gonna take some effort. Use a collapse! Use same endpoint as vvv\n        //Updating scores live, use games.link option in object.\n        //alert when game is starting soon?\n        //add a new tab for multiple players?\n        //Animate some stuff: loading components, showing logo, showing name of team, etc.\n        //\"Tweet this bitch!\" button. \n    <div>\n      <Populate /> \n    </div>\n  )\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}